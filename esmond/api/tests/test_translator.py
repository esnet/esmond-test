
from django.test import TestCase
from esmond.poll import IfRefTranslator
from esmond.api.tests.test_correlator import MockOID

EXAMPLE_DATA  = {
	'IfRefTranslator':
		{'check': [('ifPhysAddress.1', '0c:a4:02:50:74:01'),
		           ('ifPhysAddress.2', '8c:90:d3:90:99:69'),
		           ('ifPhysAddress.3', '00:00:00:00:00:00'),
		           ('ifPhysAddress.4', '00:00:00:00:00:00'),
		           ('ifPhysAddress.5', '8c:90:d3:90:98:cc'),
		           ('ifPhysAddress.6', '8c:90:d3:90:99:59'),
		           ('ifPhysAddress.7', '8c:90:d3:90:99:58'),
		           ('ifPhysAddress.8', '8c:90:d3:8a:47:6c'),
		           ('ifPhysAddress.9', '8c:90:d3:8a:47:6d'),
		           ('ifPhysAddress.10', '8c:90:d3:8a:47:6a'),
		           ('ifPhysAddress.11', '0c:a4:02:f4:16:50'),
		           ('ifPhysAddress.12', '0c:a4:02:f4:16:50'),
		           ('ifPhysAddress.13', '0c:a4:02:50:74:01'),
		           ('ifPhysAddress.14', '0c:a4:02:50:74:01'),
		           ('ifPhysAddress.15', '8c:90:d3:8a:47:72'),
		           ('ifPhysAddress.16', '8c:90:d3:8a:47:73'),
		           ('ifPhysAddress.17', '8c:90:d3:8a:47:74'),
		           ('ifPhysAddress.18', '8c:90:d3:8a:47:6f'),
		           ('ifPhysAddress.19', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.20', '8c:90:d3:8a:47:71'),
		           ('ifPhysAddress.21', '8c:90:d3:8a:47:71'),
		           ('ifPhysAddress.22', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.23', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.24', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.25', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.26', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.27', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.28', '8c:90:d3:8a:47:69'),
		           ('ifPhysAddress.29', '8c:90:d3:8a:47:69'),
		           ('ifPhysAddress.30', '0c:a4:02:f4:16:50'),
		           ('ifPhysAddress.35684352', '8c:90:d3:90:99:69'),
		           ('ifPhysAddress.69238784', '8c:90:d3:90:98:cc'),
		           ('ifPhysAddress.102793216', '8c:90:d3:90:99:59'),
		           ('ifPhysAddress.136347648', '8c:90:d3:90:99:58'),
		           ('ifPhysAddress.169902080', '0c:a4:02:f4:16:50'),
		           ('ifPhysAddress.337674240', '8c:90:d3:8a:47:69'),
		           ('ifPhysAddress.337707008', '8c:90:d3:8a:47:6a'),
		           ('ifPhysAddress.337739776', '8c:90:d3:8a:47:6b'),
		           ('ifPhysAddress.337772544', '8c:90:d3:8a:47:6c'),
		           ('ifPhysAddress.337805312', '8c:90:d3:8a:47:6d'),
		           ('ifPhysAddress.337838080', '8c:90:d3:8a:47:6e'),
		           ('ifPhysAddress.337870848', '8c:90:d3:8a:47:6f'),
		           ('ifPhysAddress.337903616', '8c:90:d3:8a:47:70'),
		           ('ifPhysAddress.337936384', '8c:90:d3:8a:47:71'),
		           ('ifPhysAddress.337969152', '8c:90:d3:8a:47:72'),
		           ('ifPhysAddress.338001920', '8c:90:d3:8a:47:73'),
		           ('ifPhysAddress.338034688', '8c:90:d3:8a:47:74'),
		           ('ifPhysAddress.369131520', '8c:90:d3:a9:47:f5'),
		           ('ifPhysAddress.402685952', '8c:90:d3:bf:78:8a'),
		           ('ifSpeed.1', 0),  # make sure other OIDS pass through OK
                   ('ifSpeed.2', 4294967295),
         ],
		 'data': [('ifPhysAddress.1', '\x0c\xa4\x02Pt\x01'),
		          ('ifPhysAddress.2', '\x8c\x90\xd3\x90\x99i'),
		          ('ifPhysAddress.3', '\x00\x00\x00\x00\x00\x00'),
		          ('ifPhysAddress.4', '\x00\x00\x00\x00\x00\x00'),
		          ('ifPhysAddress.5', '\x8c\x90\xd3\x90\x98\xcc'),
		          ('ifPhysAddress.6', '\x8c\x90\xd3\x90\x99Y'),
		          ('ifPhysAddress.7', '\x8c\x90\xd3\x90\x99X'),
		          ('ifPhysAddress.8', '\x8c\x90\xd3\x8aGl'),
		          ('ifPhysAddress.9', '\x8c\x90\xd3\x8aGm'),
		          ('ifPhysAddress.10', '\x8c\x90\xd3\x8aGj'),
		          ('ifPhysAddress.11', '\x0c\xa4\x02\xf4\x16P'),
		          ('ifPhysAddress.12', '\x0c\xa4\x02\xf4\x16P'),
		          ('ifPhysAddress.13', '\x0c\xa4\x02Pt\x01'),
		          ('ifPhysAddress.14', '\x0c\xa4\x02Pt\x01'),
		          ('ifPhysAddress.15', '\x8c\x90\xd3\x8aGr'),
		          ('ifPhysAddress.16', '\x8c\x90\xd3\x8aGs'),
		          ('ifPhysAddress.17', '\x8c\x90\xd3\x8aGt'),
		          ('ifPhysAddress.18', '\x8c\x90\xd3\x8aGo'),
		          ('ifPhysAddress.19', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.20', '\x8c\x90\xd3\x8aGq'),
		          ('ifPhysAddress.21', '\x8c\x90\xd3\x8aGq'),
		          ('ifPhysAddress.22', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.23', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.24', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.25', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.26', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.27', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.28', '\x8c\x90\xd3\x8aGi'),
		          ('ifPhysAddress.29', '\x8c\x90\xd3\x8aGi'),
		          ('ifPhysAddress.30', '\x0c\xa4\x02\xf4\x16P'),
		          ('ifPhysAddress.35684352', '\x8c\x90\xd3\x90\x99i'),
		          ('ifPhysAddress.69238784', '\x8c\x90\xd3\x90\x98\xcc'),
		          ('ifPhysAddress.102793216', '\x8c\x90\xd3\x90\x99Y'),
		          ('ifPhysAddress.136347648', '\x8c\x90\xd3\x90\x99X'),
		          ('ifPhysAddress.169902080', '\x0c\xa4\x02\xf4\x16P'),
		          ('ifPhysAddress.337674240', '\x8c\x90\xd3\x8aGi'),
		          ('ifPhysAddress.337707008', '\x8c\x90\xd3\x8aGj'),
		          ('ifPhysAddress.337739776', '\x8c\x90\xd3\x8aGk'),
		          ('ifPhysAddress.337772544', '\x8c\x90\xd3\x8aGl'),
		          ('ifPhysAddress.337805312', '\x8c\x90\xd3\x8aGm'),
		          ('ifPhysAddress.337838080', '\x8c\x90\xd3\x8aGn'),
		          ('ifPhysAddress.337870848', '\x8c\x90\xd3\x8aGo'),
		          ('ifPhysAddress.337903616', '\x8c\x90\xd3\x8aGp'),
		          ('ifPhysAddress.337936384', '\x8c\x90\xd3\x8aGq'),
		          ('ifPhysAddress.337969152', '\x8c\x90\xd3\x8aGr'),
		          ('ifPhysAddress.338001920', '\x8c\x90\xd3\x8aGs'),
		          ('ifPhysAddress.338034688', '\x8c\x90\xd3\x8aGt'),
		          ('ifPhysAddress.369131520', '\x8c\x90\xd3\xa9G\xf5'),
		          ('ifPhysAddress.402685952', '\x8c\x90\xd3\xbfx\x8a'),
		          ('ifSpeed.1', 0),  # make sure other OIDs pass through OK
                  ('ifSpeed.2', 4294967295),
		]
	},
}

class TestTranslators(TestCase):
	def test_translators(self):
		for translator, oid_name in (
			(IfRefTranslator, 'IfRefTranslator'),
		):
			t = translator()

			results = sorted(t.translate(EXAMPLE_DATA[oid_name]['data']))
			self.assertEqual(sorted(EXAMPLE_DATA[oid_name]['check']), results)
