#!/usr/bin/env python

"""
Configure a three-machine cluster to run a three-shard cluster with replica sets.
"""

import os
import pprint
import shutil
import subprocess
import sys
import time

import ConfigParser

from optparse import OptionParser

import pymongo
from pymongo.errors import ConnectionFailure, OperationFailure

from esxsnmp.error import ConfigError

class ConnectionException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

# Config parsing/etc.

def get_config_path():
    if os.environ.has_key('ESXSNMP_CLUSTER_CONF'):
        conf = os.environ['ESXSNMP_CLUSTER_CONF']
    else:
        conf = './esxsnmp.conf'

    return conf
    
def get_config(config_file, opts=None):
    if not os.path.exists(config_file):
        raise ConfigError("config file not found: %s" % config_file)

    try:
        conf = ClusterConfig(config_file)
    except ConfigParser.Error, e:
        raise ConfigError("unable to parse config: %s" % e)

    return conf
    
class ClusterConfig(object):
    def __init__(self, file):
        self.file = file
        
        self.mongo_data_dir_root = None
        self.server_1 = None
        self.server_2 = None
        self.server_3 = None
        self.username = None
        self.password = None
        self.keyfile = None
        
        self.replica_sets = {
            'set_1': {}, 'set_2': {}, 'set_3': {}
        }
        
        self.set_members_by_host = {
            'server_1': {}, 'server_2': {}, 'server_3': {}
        }
        
        self.server_addresses = []
        
        self.read_config()
        
    def read_config(self):
        defaults = {}
        for v in ('ESXSNMP_ROOT', ):
            defaults[v] = os.environ.get(v)
        
        cfg = ConfigParser.ConfigParser(defaults)
        cfg.read(self.file)
        config_items = map(lambda x: x[0], cfg.items("main"))
        for opt in (
                'mongo_data_dir_root',
                'server_1',
                'server_2',
                'server_3',
                'username',
                'password',
                'keyfile',
                ):
            if opt in config_items:
                setattr(self, opt, cfg.get("main", opt))
                if opt.startswith('server_'):
                    self.server_addresses.append(cfg.get("main", opt))
                
        for s in [
            ('set_1', 'replica_set_1'),
            ('set_2', 'replica_set_2'),
            ('set_3', 'replica_set_3'),
        ]:
            items = map(lambda x: x[0], cfg.items(s[1]))
            for i in items:
                if i == 'esxsnmp_root':
                    continue
                self.replica_sets[s[0]][i] = getattr(self, '%s' % cfg.get(s[1], i))
                self.set_members_by_host[cfg.get(s[1], i)][i] = s[0]
                
        
                            
# Server definitions

class Primary(object):
    """aka: shard server"""
    binary = 'mongod'
    port = 27018
    base = 'primary'
    args = []

class Secondary(object):
    binary = 'mongod'
    port = 27020
    base = 'secondary'
    args = []
    
class Arbiter(object):
    binary = 'mongod'
    port = 27021
    base = 'arbiter'
    args = []
    
class Config(object):
    binary = 'mongod'
    port = 27019
    base = 'configdb'
    args = ['--configsvr']
    
class Mongos(object):
    binary = 'mongos'
    port = 27017
    base = 'mongos'
    args = []
    
def check_path(dirpath):
    if not os.path.exists(dirpath):
        print dirpath,'does not exist, creating.'
        os.mkdir(dirpath)
    
def do_start(server, config, option_args):
    # basic args everything gets
    
    dbpath = '%s/%s' % (config.mongo_data_dir_root, server.base)
    check_path(dbpath)
    
    cmd = []
    
    if server.__name__ != 'Mongos':
        cmd = [
            server.binary,
            '--port', '%s' % server.port,
            '--dbpath', dbpath,
            '--logpath', '%s/mongodb.log' % dbpath,
            '--logappend',
            '--pidfilepath', '%s/mongodb.pid' % dbpath,
            '--directoryperdb',
            '--journal',
            '--fork',
        ]
    else:
        raise
        cmd = [
            server.binary,
            '--port', '%s' % server.port,
            '--logpath', '%s/mongodb.log' % dbpath,
            '--logappend',
            '--pidfilepath', '%s/mongodb.pid' % dbpath,
            '--fork',
        ]
    
    cmd = cmd + option_args + server.args
    
    p = subprocess.check_call(cmd,stderr=subprocess.STDOUT)
    
    pass
    
def start_clean(config):
    
    kill_all(config)
    servers = [Primary, Secondary, Arbiter, Config, Mongos]
    
    for s in servers:
        server_root = '%s/%s' % (config.mongo_data_dir_root, s.base)
        if os.path.exists(server_root):
            shutil.rmtree(server_root)
            
    cluster_config = '%s/cluster_config' % config.mongo_data_dir_root
    if os.path.exists(cluster_config):
        shutil.rmtree(cluster_config)
    
    option_args = [
        '--bind_ip', '127.0.0.1', # only answer on localhost for config mode
    ]
    
    for s in servers:
        if s.__name__ == 'Mongos':
            continue
        do_start(s, config, option_args)
        
def start_prepped_servers(config, server):
    print 'Starting prepped servers.'
    
    cluster_config = '%s/cluster_config' % config.mongo_data_dir_root
    option_args = [
        '--keyFile', '%s/keyfile' % cluster_config
    ]
    
    sets = config.set_members_by_host[server]
    
    print sets
    
    for s in [Primary, Secondary, Arbiter]:
        #args = ['--replSet', '%s' % sets[s.base]]
        args = ['--replSet', '%s' % 'set_1']
        args = args + option_args
        do_start(s, config, args)
        
    do_start(Config, config, option_args)
    
def kill_all(config):
    print 'Executing kill all.'
    for s in [Primary, Secondary, Arbiter, Config, Mongos]:
        pidfile = '%s/%s/mongodb.pid' % (config.mongo_data_dir_root, s.base)
        if os.path.exists(pidfile):
            fh = open(pidfile, 'r')
            pid = fh.read().strip()
            fh.close()
            try:
                os.kill(int(pid),3)
            except:
                pass
            os.unlink(pidfile)
            
def get_mongo_connection(db, port, host='localhost', user='', passwd=''):
    try:
        connection = pymongo.Connection(host=host, port=port)
    except ConnectionFailure:
        raise ConnectionException("Couldn't connect to DB "
                        "at %s:%d" % (host, port))
                        
    db_conn = connection[db]
                        
    if user != '':
        success = db_conn.authenticate(user, passwd)
        if not success:
            raise ConnectionException("Could not authenticate to "
                                      "database as user '%s'" % (config.mongo_user))
                        
    return db_conn
            
def set_authentication(config):
    print 'Setting up authentication.'
    #for s in [Primary, Secondary, Arbiter, Config]:
    for s in [Primary, Config]:
        print '  *', s.__name__
        admin = get_mongo_connection('admin', s.port)
        admin.add_user(config.username, config.password)
        admin.connection.close()
    
        if s.__name__ == 'Config':
            continue
            
        local = get_mongo_connection('local', s.port)
        local.add_user(config.username, config.password)
        local.connection.close()
    
        esx = get_mongo_connection('esxsnmp', s.port)
        esx.add_user(config.username, config.password)
        esx.connection.close()
        
    print 'Setting keyfile'
    cluster_config = '%s/cluster_config' % config.mongo_data_dir_root
    check_path(cluster_config)
    key_path = cluster_config + '/keyfile'
    fh = open(key_path, 'w')
    fh.write(config.keyfile)
    fh.flush()
    fh.close()
    os.chmod(key_path, 0700)
    
def initialize_replica_set(config, r_set, set_members):
    print 'Initializing replica set', r_set
    primary = '%s:%s' % (set_members['primary'], Primary.port)
    secondary = '%s:%s' % (set_members['secondary'], Secondary.port)
    arbiter = '%s:%s' % (set_members['arbiter'], Arbiter.port)
    
    host, port = set_members['primary'], Primary.port
    
    set_config = {
        "_id": "%s" % r_set,
        "members" : [
            {
                "priority": 2,
                "host": "%s" % primary,
                "_id": 0
            },
            {
                "priority": 1,
                "host": "%s" % secondary,
                "_id": 1
            },
            {
                "host": "%s" % arbiter,
                "_id": 2,
                "arbiterOnly": True
            }
        ]
    }
    
    print 'Config:', pprint.pprint(set_config)
    
    admin = get_mongo_connection('admin', host=host, port=port, 
        user=config.username, passwd=config.password)
        
    admin.command("replSetInitiate", set_config )
    while 1:
        try:
            ret = admin.command("replSetGetStatus")
            ready = True
            for i in ret['members']:
                if i['stateStr'] == 'STARTUP2' or i['stateStr'] == 'UNKNOWN' \
                    or i['stateStr'] == 'RECOVERING':
                    ready = False
            if ready:
                print pprint.pprint(admin.command("replSetGetStatus"))
                break
            else:
                print 'Waiting for set to come online...'
                time.sleep(4)
        except OperationFailure:
            print 'Waiting for set to come online...'
            time.sleep(2)
    
    
def get_server_prompt(config):
    prompt = """
    The --init option needs to know what server you are currently on.
    Please enter the number that corresponds to the server you are
    initializing the servers on and hit enter.
    
    These are the options configured in mongodb-cluster.conf:
    [1] server_1 (%s)
    [2] server_2 (%s)
    [3] server_3 (%s)
    
    """ % (config.server_1, config.server_2, config.server_3)
    
    return raw_input(prompt)
    
def do_server_prompt(config):
    retvals = [1, 2, 3]
    selection = None
    
    while selection not in retvals:
        try:
            selection = int(get_server_prompt(config))
        except ValueError:
            pass
        
    return 'server_%s' % selection
    
def get_replicaset_prompt(config):
    prompt = """
    The --replica_set option needs to know which replica set you 
    wish to configure.  This may be done from any machine in the 
    cluster as long as all machines have successfully had --init 
    run locally.  Please enter the number of the replica set you
    wish to configure.  If you are setting this up on a single node 
    (see note in example-mongodb-cluster.conf), just configure the
    first replica set.
    
    These are the options:
    [1] set_1
    [2] set_2
    [3] set_3
    
    """
    return raw_input(prompt)
    
def do_replicaset_prompt(config):
    retvals = [1, 2, 3]
    selection = None

    while selection not in retvals:
        try:
            selection = int(get_replicaset_prompt(config))
        except ValueError:
            pass

    return 'set_%s' % selection

def main():
    usage = '%prog [options]'
    desc = ' '.join(__doc__.split())
    parser = OptionParser(usage=usage, description=desc)
    parser.add_option('-i', '--init', action="store_true", default=False,
                      dest="init",
                      help="Start servers from scratch and configure auth.")
    parser.add_option('-k', '--kill', action="store_true", default=False,
                        dest="kill",
                        help="Kill all running servers.")
    parser.add_option('-r', '--replica', action="store_true", default=False,
                        dest="replica_set",
                        help="Configure a replica set.")
    options, args = parser.parse_args()
    
    # XXX(mmg): change to take an opt rather than env?
    conf = get_config(get_config_path())
    
    if options.kill:
        kill_all(conf)
    
    if options.init:
        print 'Initializing servers'
        check_path(conf.mongo_data_dir_root)
        start_clean(conf)
        time.sleep(1)
        set_authentication(conf)
        time.sleep(1)
        kill_all(conf)
        time.sleep(1)
        server = do_server_prompt(conf)
        start_prepped_servers(conf, server)
        sys.exit(0)
        
    if options.replica_set:
        print 'Configuring replica set.'
        r_set = do_replicaset_prompt(conf)
        set_members = conf.replica_sets[r_set]
        initialize_replica_set(conf, r_set, set_members)



    pass


if __name__ == '__main__':
    main()