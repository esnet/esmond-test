#!/usr/bin/env python

"""
Configure a three-machine cluster to run a three-shard cluster with replica sets.
"""

import os
import shutil
import subprocess
import time

import ConfigParser

from optparse import OptionParser


from esxsnmp.error import ConfigError

# Config parsing/etc.

def get_config_path():
    if os.environ.has_key('ESXSNMP_CLUSTER_CONF'):
        conf = os.environ['ESXSNMP_CLUSTER_CONF']
    else:
        conf = './esxsnmp.conf'

    return conf
    
def get_config(config_file, opts=None):
    if not os.path.exists(config_file):
        raise ConfigError("config file not found: %s" % config_file)

    try:
        conf = ClusterConfig(config_file)
    except ConfigParser.Error, e:
        raise ConfigError("unable to parse config: %s" % e)

    return conf
    
class ClusterConfig(object):
    def __init__(self, file):
        self.file = file
        
        self.mongo_data_dir_root = None
        self.server_1_address = None
        self.server_2_address = None
        self.server_3_address = None
        self.username = None
        self.password = None
        self.keyfile = None
        
        self.read_config()
        
    def read_config(self):
        defaults = {}
        for v in ('ESXSNMP_ROOT', ):
            defaults[v] = os.environ.get(v)
        
        cfg = ConfigParser.ConfigParser(defaults)
        cfg.read(self.file)
        config_items = map(lambda x: x[0], cfg.items("main"))
        for opt in (
                'mongo_data_dir_root',
                'server_1_address',
                'server_2_address',
                'server_3_address',
                'username',
                'password',
                'keyfile',
                ):
            if opt in config_items:
                setattr(self, opt, cfg.get("main", opt))
                
# Server definitions

class Primary(object):
    """aka: shard server"""
    binary = 'mongod'
    port = 27018
    base = 'primary'
    args = []

class Secondary(object):
    binary = 'mongod'
    port = 27020
    base = 'secondary'
    args = []
    
class Arbiter(object):
    binary = 'mongod'
    port = 27021
    base = 'arbiter'
    args = []
    
class Config(object):
    binary = 'mongod'
    port = 27019
    base = 'configdb'
    args = ['--configsvr']
    
class Mongos(object):
    binary = 'mongos'
    port = 27017
    base = 'mongos'
    args = []
    
def check_path(dirpath):
    if not os.path.exists(dirpath):
        print dirpath,'does not exist, creating.'
        os.mkdir(dirpath)
    
def do_start(server, config, option_args):
    # basic args everything gets
    
    dbpath = '%s/%s' % (config.mongo_data_dir_root, server.base)
    check_path(dbpath)
    
    cmd = [
        server.binary,
        '--port', '%s' % server.port,
        '--dbpath', dbpath,
        '--logpath', '%s/mongodb.log' % dbpath,
        '--logappend',
        '--pidfilepath', '%s/mongodb.pid' % dbpath,
        '--directoryperdb',
        '--journal',
        '--fork',
    ]
    
    cmd = cmd + option_args + server.args
    
    p = subprocess.check_call(cmd,stderr=subprocess.STDOUT)
    
    pass
    
def start_clean(config):
    
    kill_all(config)
    servers = [Primary, Secondary, Config]
    
    for s in servers:
        server_root = '%s/%s' % (config.mongo_data_dir_root, s.base)
        if os.path.exists(server_root):
            shutil.rmtree(server_root)
    
    option_args = [
        '--bind_ip', '127.0.0.1', # only answer on localhost for config mode
    ]
    
    for s in servers:
        do_start(s, config, option_args)
    
def kill_all(config):
    print 'Executing kill all.'
    for s in [Primary, Secondary, Config]:
        pidfile = '%s/%s/mongodb.pid' % (config.mongo_data_dir_root, s.base)
        if os.path.exists(pidfile):
            fh = open(pidfile, 'r')
            pid = fh.read().strip()
            fh.close()
            os.kill(int(pid),3)
            os.unlink(pidfile)

def main():
    usage = '%prog [options]'
    desc = ' '.join(__doc__.split())
    parser = OptionParser(usage=usage, description=desc)
    parser.add_option('-c', '--config', action="store_true", default=False,
                      dest="config",
                      help="Start servers from scratch and configure associations.")
    options, args = parser.parse_args()
    
    # XXX(mmg): change to take an opt rather than env?
    conf = get_config(get_config_path())
    
    check_path(conf.mongo_data_dir_root)
        
    start_clean(conf)
    
    time.sleep(3)
        
    kill_all(conf)


    
    pass


if __name__ == '__main__':
    main()