#!/usr/bin/env python

import os
import pickle
import resource
import shutil
import subprocess
import sys
import time
import uuid

from optparse import OptionParser

import pymongo
from pymongo.errors import ConnectionFailure, OperationFailure
from bson.son import SON

from esxsnmp.mongo import MONGO_DB

servers = ['mongos', 'config', 'primary']

s_roots = {}

class ConnectionException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

def kill_all(root, quiet=False):
    if not quiet: print 'Executing kill all.'
    for s in servers:
        pidfile = '%s/%s/mongodb.pid' % (root,s)
        if os.path.exists(pidfile):
            fh = open(pidfile, 'r')
            pid = fh.read().strip()
            fh.close()
            try:
                #if not quiet: print 'Killing', pid, 
                os.kill(int(pid),2)
                time.sleep(1)
                kill_all(root,quiet=True)
            except:
                print pid, 'done'
                os.unlink(pidfile)
            
def clear_all(root):
    for s in servers:
        server_root = '%s/%s' % (root, s)
        if os.path.exists(server_root):
            shutil.rmtree(server_root)
            
    cluster_config = '%s/cluster_config' % root
    if os.path.exists(cluster_config):
        shutil.rmtree(cluster_config)

def check_path(dirpath):
    if not os.path.exists(dirpath):
        os.mkdir(dirpath)
        
def get_mongo_connection(db, port, host='localhost', user='', passwd=''):
    try:
        connection = pymongo.Connection(host=host, port=port)
    except ConnectionFailure:
        raise ConnectionException("Couldn't connect to DB "
                        "at %s:%d" % (host, port))

    db_conn = connection[db]

    if user != '':
        success = db_conn.authenticate(user, passwd)
        if not success:
            raise ConnectionException("Could not authenticate to "
                                      "database as user '%s'" % (config.mongo_user))

    return db_conn
        
def load_test_data(root,name):
    if not os.environ.has_key('ESXSNMP_ROOT'):
        print 'ESXSNMP_ROOT not defined - can not load test data'
        sys.exit()
    path = os.path.join(os.environ['ESXSNMP_ROOT'], "../", "test_data", name)
    fh = open(path, 'r')
    data = pickle.load(fh)
    fh.close()
    return data

#####

parser = OptionParser()
parser.add_option('-s', '--single', action="store_true", default=False,
                    dest="single",
                    help="Spin up one vanilla mongo instance and test.")
parser.add_option('-m', '--multi', action="store_true", default=False,
                    dest="multi",
                    help="Spin up simple shard instance and test.")
parser.add_option('-k', '--kill', action="store_true", default=False,
                    dest="kill",
                    help="Kill and clean all.")
parser.add_option('-n', '--nosafe', action="store_false", default=True,
                    dest="safe",
                    help="Toggle safe writes off.")
parser.add_option('-d', '--data', action="store", default='',
                    dest="data",
                    help="Specify data directory base manually.")
parser.add_option('-w', '--nowrite', action="store_true", default=False,
                    dest="nowrite",
                    help="Just spin up, no writes done.")
parser.add_option('-l', '--loop', action="store", type='int', default=1,
                    dest="loop",
                    help="Number of times to loop over test data.")
parser.add_option('-p', '--profile', action="store_true", default=False,
                    dest="profile",
                    help="Enable profiling on primary.")
parser.add_option('-a', '--auth', action="store_true", default=False,
                    dest="auth",
                    help="Enable keyFile on cluster for testing.")
parser.add_option('-o', '--writeonly', action="store_true", default=False,
                    dest="writeonly",
                    help="Only execute write, don't start/kill servers.")
parser.add_option('-C', '--confighost', action="store", default='localhost',
                    dest="confighost",
                    help="Manually set config server hostname (default localhost).")
parser.add_option('-S', '--shardhost', action="store", default='localhost',
                    dest="shardhost",
                    help="Manually set shard hostname (default localhost).")
parser.add_option('-A', '--auxonly', action="store_true", default=False,
                    dest="auxonly",
                    help="Just spin up a mongos/mongod (no config, sharding enabled).")

                    
options, args = parser.parse_args()

root = None

if not options.data:
    if os.environ.has_key('ESXSNMP_ROOT'):
        root = os.environ['ESXSNMP_ROOT'] + '/cluster_test'
        check_path(root)
    else:
        print 'ESXSNMP_ROOT env var not defined.'
        sys.exit()
else:
    root = options.data + '/cluster_test'
    print root

servers = ['mongos', 'config', 'primary']
keyfile = '%s/keyfile' % root

if options.multi or options.single:
    kill_all(root)
    clear_all(root)
    check_path(root)

if options.kill:
    sys.exit()

for s in servers:
    check_path('%s/%s' % (root,s))
    s_roots[s] = '%s/%s' % (root,s)
    
if options.multi and options.single:
    print 'Can only use --multi OR --single.'
    sys.exit()

if not options.multi and not options.single and not options.writeonly:
    print 'Must specify --multi or --single or --writeonly'
    sys.exit()

if os.uname()[0] == 'Darwin':
    print 'Setting limits for OS X'
    resource.setrlimit(resource.RLIMIT_STACK, (1048576, 67104768))
    resource.setrlimit(resource.RLIMIT_NOFILE, (10239, 9223372036854775807))
elif os.uname()[0] == 'Linux':
    print 'Setting limits for Linux'
    resource.setrlimit(resource.RLIMIT_STACK, (1048576, -1))
    resource.setrlimit(resource.RLIMIT_NOFILE, (4096, 10000))
else:
    print '%s unknown - not setting limits' % os.uname()[0]

print 'print RLIMIT_STACK', resource.getrlimit(resource.RLIMIT_STACK)
print 'print RLIMIT_NOFILE', resource.getrlimit(resource.RLIMIT_NOFILE)

sk = [('device', 1), ('path', 1), ('oid', 1), ('ts', 1)]
    
if options.multi:
    cluster_config = '%s/cluster_config' % root
    check_path(cluster_config)
    keyfile = cluster_config + '/keyfile'
    
    fh = open(keyfile, 'w')
    fh.write(str(uuid.uuid1()).replace('-', ''))
    fh.close()
    
    os.chmod(keyfile, 0700)
    
    args = [
        '--fork',
    ]
    
    if options.auth:
        args = args + ['--keyFile', keyfile]

    start_config = [
        'mongod',
        '--port', '27019',
        '--dbpath', s_roots['config'],
        '--logpath', '%s/mongodb.log' % s_roots['config'],
        '--pidfilepath', '%s/mongodb.pid' % s_roots['config'],
        '--nojournal',
        '--syncdelay', '1',
        '--configsvr'
    ]

    start_config = start_config + args
    
    if os.uname()[0] == 'Linux':
        start_config = ['numactl', '--interleave=all'] + start_config

    if not options.auxonly:
        p = subprocess.check_call(start_config,stderr=subprocess.STDOUT)
    
    time.sleep(3)

    start_mongos = [
        'mongos',
        '--port', '27017',
        '--logpath', '%s/mongodb.log' % s_roots['mongos'],
        '--pidfilepath', '%s/mongodb.pid' % s_roots['mongos'],
        '--configdb', '%s:27019' % options.confighost
    ]

    start_mongos = start_mongos + args
    
    if os.uname()[0] == 'Linux':
        start_mongos = ['numactl', '--interleave=all'] + start_mongos

    p = subprocess.check_call(start_mongos,stderr=subprocess.STDOUT)
    
    time.sleep(3)

    start_primary = [
        'mongod',
        '--port', '27018',
        '--dbpath', s_roots['primary'],
        '--logpath', '%s/mongodb.log' % s_roots['primary'],
        '--pidfilepath', '%s/mongodb.pid' % s_roots['primary'],
        '--nojournal',
        '--syncdelay', '1',
        '--shardsvr'
    ]
    
    if options.profile:
        start_primary = start_primary + \
            ['--profile', '1']

    start_primary = start_primary + args
    
    if os.uname()[0] == 'Linux':
        start_primary = ['numactl', '--interleave=all'] + start_primary

    p = subprocess.check_call(start_primary,stderr=subprocess.STDOUT)

    print 'Waiting to connect.'
    time.sleep(5)

    #sys.exit()

    admin = get_mongo_connection('admin', 27017)
    admin.command("addShard", '%s:27018' % options.shardhost)

    config = admin.connection['config']
    for s in config.shards.find():
        print s
        
    if not options.auxonly:
        print admin.command('enablesharding', 'esxsnmp')
    
        shard_keys = {
            'raw_data': SON(MONGO_DB.path_idx),
            'metadata': SON(MONGO_DB.meta_idx),
            'base_rates': SON(MONGO_DB.rate_idx),
            'aggregations': SON(MONGO_DB.agg_idx),
        }
    
        for k,v in shard_keys.items():
            if not len(v):
                continue
            print admin.command('shardcollection', 'esxsnmp.%s' % k, key=v )
        
    esx = admin.connection['esxsnmp']
        
if options.single:
    args = [
        '--fork',
    ]
    
    start_single = [
        'mongod',
        '--port', '27017',
        '--dbpath', s_roots['primary'],
        '--logpath', '%s/mongodb.log' % s_roots['primary'],
        '--pidfilepath', '%s/mongodb.pid' % s_roots['primary'],
        '--nojournal',
        '--syncdelay', '1'
    ]

    start_single = start_single + args
    
    if os.uname()[0] == 'Linux':
        start_single = ['numactl', '--interleave=all'] + start_single
    
    if options.profile:
        start_single = start_single + \
            ['--profile', '1']

    p = subprocess.check_call(start_single,stderr=subprocess.STDOUT)
    
    time.sleep(2)
    
    esx = get_mongo_connection('esxsnmp', 27017)
    
    idx_keys = {
        #'raw_data': MONGO_DB.path_idx,
        'metadata': MONGO_DB.meta_idx,
        'base_rates': MONGO_DB.rate_idx,
        'aggregations': MONGO_DB.agg_idx,
    }
    
    for k,v in idx_keys.items():
        continue
        esx[k].ensure_index(v)

if options.nowrite:
    print 'not writing'
    sys.exit()
    
if options.writeonly:
    esx = get_mongo_connection('esxsnmp', 27017)

print 'starting write in 5 seconds - safe mode: %s' % options.safe
time.sleep(5)

count = timing = 0

data = load_test_data(root, 'write_test.pickle')

for x in xrange(options.loop):
    for i in data:
        if i.has_key('_id'):
            del i['_id']
        count += 1
        t = time.time()
        esx.raw_data.insert(i, safe=options.safe)
        timing += time.time() - t

print count, 'rows'
print timing, 'seconds'
print count/timing, 'per second'

