#!/usr/bin/env python

"""
Small example script to drive the api.fetch_data query objects.
"""

import calendar
import datetime
import json
import os
import pprint
import requests
import sys
import time
import warnings

from optparse import OptionParser

from esmond.api.client.fetch_data import ApiConnect, ApiFilters

def main():
    import os.path
    from optparse import OptionParser
    usage = '%prog [ -v | -H hostname ]'
    parser = OptionParser(usage=usage)
    parser.add_option('-H', '--hostname', metavar='HOST',
            type='string', dest='hostname', 
            help='Host running rest api (default=%default).', 
            default='localhost')
    parser.add_option('-l', '--last', metavar='LAST',
            type='int', dest='last', default=0,
            help='Last n minutes of data to query.')
    parser.add_option('-p', '--port', metavar='PORT',
            type='int', dest='port', default=80,
            help='Port number for of rest api.')
    parser.add_option('-d', '--device', metavar='DEVICE',
            type='string', action='store', 
            default=None, dest='device',
            help='Device name to filter - can also be a pattern (ex: lbl-).')
    parser.add_option('-i', '--interface', metavar='INTERFACE',
            type='string', dest='interface', 
            help='Interface name to filter - can also be a pattern (ex: lo.')
    parser.add_option('-v', '--verbose',
                dest='verbose', action='count', default=False,
                help='Verbose output - -v, -vv, etc.')
    options, args = parser.parse_args()

    filters = ApiFilters()

    filters.verbose = options.verbose

    if options.last:
        filters.begin_time = int(time.time() - (options.last*60))

    if options.device:
        filters.device = options.device

    if options.interface:
        filters.interface = options.interface

    conn = ApiConnect(options.hostname, options.port, filters)

    # return 1

    for d in conn.get_devices():
        print d
        # print d.dump
        print '  *', d.begin_time, '|', d.end_time
        # continue
        for i in d.get_interfaces():
            print '  ', i, i.begin_time
            for e in i.get_endpoints():
                print '   *', e
                print '     +', e.get_data().dump
        break    
    pass

if __name__ == '__main__':
    main()