#!/usr/bin/env python

import json
from optparse import OptionParser
import os
import random
import requests
import sys
import threading
import time

class fetchData(threading.Thread):
    def __init__(self, id, host, uri, delay):
        threading.Thread.__init__(self)
        self.id = id
        self.host = host
        self.uri = uri
        self.delay = delay

    def run(self):
        # Introduce a little start time variation
        time.sleep(random.randint(0, self.delay))
        r = requests.get('http://{0}/{1}'.format(self.host, self.uri))
        try:
            data = json.loads(r.text)
            if data['data']:
                print 'data found for {0} by thread {1}'.format(self.uri, self.id)
            else:
                print 'no data for {0} by thread {1}'.format(self.uri, self.id)
        except ValueError, e:
            print 'bad response {0} for endpoint {1}'.format(r.status_code, self.uri)

def main():
    usage = '%prog [ -H hostname | -t number of threads | -d randint delay entropy ]'
    parser = OptionParser(usage=usage)
    parser.add_option('-H', '--hostname', metavar='HOST',
            type='string', dest='hostname', 
            help='Host running rest api (default=%default).', default='localhost')
    parser.add_option('-t', '--threads', metavar='THREADS',
            type='int', dest='threads', default=50,
            help='Number of client threads to launch (default=%default).')
    parser.add_option('-d', '--delay', metavar='DELAY',
            type='int', dest='delay', default=5,
            help='Second range generated by randint to introduce thread startup entropy (default=%default).')
    options, args = parser.parse_args()

    workers = []

    device_uris = []
    interface_uris = []
    traffic_uris = []

    r = requests.get('http://{0}/v1/device/'.format(options.hostname))

    if r.status_code == 200 and \
        r.headers['content-type'] == 'application/json':
        data = json.loads(r.text)
        for i in data:
            for ii in i['children']:
                if ii['name'] != 'interface':
                    continue
                device_uris.append(ii['uri'])

        for device in device_uris:
            r = requests.get('http://{0}/{1}/'.format(options.hostname, device))
            data = json.loads(r.text)
            for i in data['children']:
                interface_uris.append(i['resource_uri'])

        for interface in interface_uris:
            if len(traffic_uris) >= options.threads:
                break
            r = requests.get('http://{0}/{1}/'.format(options.hostname, interface))
            if r.status_code == 200:
                data = json.loads(r.text)
                if data['children']:
                    for c in data['children']:
                        if c['name'] == 'in' or c['name'] == 'out':
                            traffic_uris.append(c['uri'])
            
        print 'gathered {0} traffic uris'.format(len(traffic_uris))
    else:
        print 'got bad response'

    id = 1
    for u in traffic_uris[0:options.threads]:
        workers.append(fetchData(id, options.hostname, u, options.delay))
        id += 1

    print 'launching {0} client threads'.format(len(workers))

    t = time.time()
    for w in workers:
        w.start()
    for w in workers:
        w.join()

    print 'fetched {0} endpoints in {1} seconds'.format(options.threads, time.time() - t)

    pass

if __name__ == '__main__':
    main()