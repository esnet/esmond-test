ESxSNMP: The ESnet Extensible SNMP System
=========================================

Overview
--------

ESxSNMP is a system for collecting, storing, visualizing and analyzing large
sets of SNMP data. It was driven by the needs of the ESnet engineering team
but is likely useful to a much wider audience. ESxSNMP has a RESTful API which
allows easy access to the data which is collected.

ESxSNMP uses a hybrid model for storing data. Time series data such as
interface counters is stored using TSDB_. TSDB is a library for storing time
series data with no loss of information. TSDB optimizes the store of it's data
so that data which share similar timestamps is stored nearby on the disk
allowing very fast access to specific time ranges. Data such as interface
description and interface type are stored in an SQL database. Storing this
data in an SQL database allows us to use the full expressiveness of SQL to
query this data. Since this data changes relatively infrequently the demands
placed on the SQL server are fairly modest.  Our production server uses
PostgreSQL_, but it's likely that SQLite_ would work just fine.

.. _TSDB: http://code.google.com/p/tsdb/

Architecture
::::::::::::

Desgin Goals
::::::::::::

ESxSNMP was designed to meet the needs of the Network Engineering group at
ESnet_.  The key design goals were:

  * data collection should be very reliable
  * data visualization should be very reliable but not at the expense of data
    collection
  * raw data should never be discarded
  * new interfaces should be detected automatically
  * automate as much as possible
  * provide a clean interface for programatic control

.. _ESnet: http://www.es.net/

Installation and Configuration
------------------------------

Prerequisites
:::::::::::::

ESxSNMP relies on the following software:

  * Python_, version 2.5 or greater
  * Net-SNMP_
  * PostgreSQL_, verson 8.0 or greater
  * memcached_

In addition, it uses the following Python libraries:

  * DLNetSNMP_, with ESnet mods
  * psycopg2_
  * SQLAlchemy_
  * web.py_ 
  * TSDB_
  * memcached_

.. _Python: http://www.python.org/
.. _Net-SNMP: http://www.net-snmp.org/
.. _PostgreSQL: http://www.postgresql.org/
.. _memcached: http://memcached.org/
.. _DLNetSNMP: http://bitbucket.org/jdugan/dlnetsnmp
.. _psycopg2: http://www.initd.org/pub/software/psycopg/PSYCOPG-2-0/
.. _SQLAlchemy: http://www.sqlalchemy.org/
.. _web.py: http://webpy.org/
.. _TSDB: http://code.google.com/p/tsdb/
.. _memcached: http://www.memcached.org/

Installation
::::::::::::

Using buildout
~~~~~~~~~~~~~~

buildout, or more specifically zc.buildout, is a tool for creating an isolated
Python environment and installing packages inside it.  It is used in some
parts of the Python community to manage deployments and is currently the most
convienent way to install ESxSNMP.  At some point in the future this may
change. buildout includes a bootstrap script that has a single dependency
which is Python.

1. Install the prerequisites

    You will need to install Python, Net-SNMP and PostgreSQL using your normal
    method for installing software.  These packages are very common and are
    supported by most Linux distributions, BSD systems, OS X and others.

1. Obtain the code

    Currently there is no release tarball so we'll use a version checked out
    from the Subversion repo.

    The directory you install ESxSNMP into will be referred to as ESXSNMP.

        $ cd $ESXSNMP
        $ svn checkout http://esxsnmp.googlecode.com/svn/trunk/ esxsnmp

    Note that this creates a subdirectory called esxsnmp, so if you have
    $ESXSNMP set to /opt/esxsnmp, the code will be in /opt/esxsnmp/esxsnmp/

1. Perform the buildout

    Buildout is a tool that allows the construction of an isolated environment
    for running Python programs.  It will take care of fetching the Python
    dependencies and installing them in this isolated environement.  To do the
    buildout run the following commands:

       $ cd $ESXSNMP/esxsnmp
       $ python bootstrap.py
       $ bin/buildout

    Note that all of the programs will be installed in $ESXSNMP/esxsnmp/bin.
    So to run the polling daemon for example you'd run
    $ESXSNMP/esxsnmp/bin/espolld.
   
Traditional Installation
~~~~~~~~~~~~~~~~~~~~~~~~

Currently the buildout install is the only documented install method.  A more
traditional install will be available in the next release.  If you install all
of ESxSNMP's Python dependencies by hand you should be able to use the
setup.py in the distribution to handle installing ESxSNMP in the traditional
way.  If you try this please let us know how it worked out for you.

RPM Installation
~~~~~~~~~~~~~~~~

There is an RPM being developed for ESxSNMP.  If you'd like to try it out drop
us a line and we'll get you a copy.

Configuration
:::::::::::::

Config File
~~~~~~~~~~~

Here is an example esxsnmp.conf file:

    [main]
    esxsnmp_root = /data/esxsnmp
    db_uri =  postgres://snmp:SOMEPASS@localhost/esxsnmp
    tsdb_root = /ssd/esxsnmp/data
    tsdb_chunk_prefixes = /ssd/esxsnmp/data,/data/esxsnmp/data
    mib_dirs = %(esxsnmp_root)s/etc/mibs
    mibs = JUNIPER-FIREWALL-MIB,JUNIPER-COS-MIB,INFINERA-PM-GIGECLIENTCTP-MIB
    syslog_facility = local7
    syslog_priority = debug
    traceback_dir = /data/esxsnmp/crashlog
    pid_dir = %(esxsnmp_root)s/var/
    espersistd_uri = 127.0.0.1:11211
    espoll_persist_uri = MemcachedPersistHandler:127.0.0.1:11211
    htpasswd_file = /data/esxsnmp/etc/htpasswd
    [persist_map]
    FastPollHC = tsdb
    FastPoll = tsdb
    InfFastPollHC = tsdb
    JnxFirewall = tsdb
    JnxCOS = tsdb
    Errors = tsdb
    IfRefPoll = ifref
    [persist_queues]
    tsdb = TSDBPollPersister:8
    ifref = IfRefPollPersister:1

db_uri
^^^^^^

db_uri specfies how to contact the SQL database

espoll_persist_uri
^^^^^^^^^^^^^^^^^^

This tells `espolld` where to find the work queue for data persistence.  It is
of the form handler:ip_addr:port.  Currently the only handler implemented is
the MemcachedPersistHandler.  

esxsnmp_root
^^^^^^^^^^^^

The root of the ESxSNMP installation.  This is used to find other important
resource.

htpasswd_file
^^^^^^^^^^^^^

This is location of the password file that is used by `newdb`

mib_dirs
^^^^^^^^

This is a comma separated list of directories additional MIBs can be found.  DLNetSNMP
automatically includes the system MIB dir in the MIB path.


mibs
^^^^

This is a comma separated list of MIBs to load at startup time.

pid_dir
^^^^^^^

Directory to store pid files in.

syslog_facility
^^^^^^^^^^^^^^^

Controls which syslog facility ESxSNMP uses for logging.

syslog_priority
^^^^^^^^^^^^^^^

Controls the verbosity of log messages sent to syslog.  Defaults to info.

traceback_dir
^^^^^^^^^^^^^

When an ESxSNMP daemon crashes the system makes an effort to save a traceback
for later fault analysis.  This controls where those files are logged.

tsdb_chunk_prefixes
^^^^^^^^^^^^^^^^^^^

TSDB implements a simple union filesystem for data storage.  This is a comma
separated list of the directories to be used.

tsdb_root
^^^^^^^^^

This is the path to the top (write) layer of the TSDB.  It should be the same
as the first component of of tsdb_chunk_prefixes.

[persist_map] and [persist_queues]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The default configuration should be fine for most situations.

    [persist_map]
    FastPollHC = tsdb
    FastPoll = tsdb
    InfFastPollHC = tsdb
    JnxFirewall = tsdb
    JnxCOS = tsdb
    Errors = tsdb
    IfRefPoll = ifref
    [persist_queues]
    tsdb = TSDBPollPersister:8
    ifref = IfRefPollPersister:1

Creating the SQL Database
~~~~~~~~~~~~~~~~~~~~~~~~~

The database defined in db_uri needs to be created and loaded with the schema
in src/sql/esxsnmp.sql.

Configuring Collection
~~~~~~~~~~~~~~~~~~~~~~

Data collection is controlled by the configuration stored in the database.  A
`device` is any device from which data needs to be extracted.  Each device can
#be configured to have one or more `OIDSet` s collected.  An OIDSet is a list of
(generally) related `OID` s to collect together.

An initial set of OIDs and OIDSets is included in src/sql/testdata.sql.

To add a device to ESxSNMP you need to do:


   INSERT INTO device (name, begin_time, end_time, community, active)
       VALUES ('test-router', 'NOW', 'infinity', 'public', true);

name should be the DNS name of the device.  I certainly hope you aren't using
'public' for your community.

Once the device has been added you need to define some OIDSets to poll on that
device.  The OIDSets definied in testdata.sql are IfRefPoll, FastPoll and
FastPollHC.  IfRefPoll collects information about the interface such as it's
speed, it's description, etc.  FastPoll and FastPollHC collect
if{In,Out}Octets and ifHC{In,Out}Octets respectively.  To add a OIDSet to be
polled for a device do:

    INSERT INTO DeviceOIDSetMap (DeviceId, OIDSetId)
        VALUES (DeviceId, OIDSetId);

Testing Polling
:::::::::::::::

You can check to see what the results of polling a device would look like by
using the `espoll` tool.  For example:

    $ bin/espoll -f /path/to/esxsnmp/conf router oidset

Start Data Collection
:::::::::::::::::::::

To start collection you need to start the polling and persistence daemons:

    $ bin/espersistd -f /path/to/esxsnmp.conf
    $ bin/espolld -f /path/to/esxsnmp.conf

To monitor the progress of the polling and persisting do:

    $ bin/espersistd -f /path/to/esxsnmp.conf -r stats

You should also see messages in syslog.

Performance Tuning
::::::::::::::::::

Presently TSDB is very I/O intensive.  The current deployment at ESnet uses a
SSD as the top level storage.

Setting up `esdbd` standalone
::::::::::::::::::::::::::::::

   $ bin/esdbd -f /path/to/esxsnmp.conf

Setting up `esdbd` with mod_wsgi
::::::::::::::::::::::::::::::::

To be written, there is a example wsgi wrapper in util.

Graphite Integration
::::::::::::::::::::

Use Store in esxsnmp.graphite_store as the data store for Graphite.  This
section needs to be signficantly fleshed out.

Care and Feeding
::::::::::::::::

If you're using a two level data store take a look at migrate-tsdb-chunks in
util.   

ESxSNMP subsystems
------------------

`espolld`
:::::::::

`espolld` is the process which polls the devices, correlates the data (if
necessary) and puts the data into a work queue which is consumed by
`espersistd`.

Operation
~~~~~~~~~

When `espolld` is started it will query the database for a list of currently
active devices and which OIDSets should be polled for each device.  `espolld`
has two threads of execution: a thread to perform the polling and a thread to
hand data off to `espersistd`.  

`espersistd` manages writing the collected data to disk.  Data collected by
`espolld` is placed into a work queue in `memcached`.  A worker `espersistd`
process removes data from the `memcached` work queue, performs the necessary
calculations on the data and writes it to persistent storage.  The persistent
storage is either a TSDB database or a SQL database.

At present `espolld` and `espersistd` do not use `esdbd` for database
interactions but instead contacts the SQL and TSDB databases directly.  This
issue will be addressed in future versions of ESxSNMP.

`esdbd`
:::::::

`esdbd` provides a consistent interface to the ESxSNMP databases.  It provides
a front end service to query both the SQL and TSDB datastores.  `esdb` is
deprecated, see `newdbd`

`espersistd`
::::::::::::

`newdb`
:::::::

`newdb` provides a RESTful interface to the data.  It is typically run under
mod_wsgi inside Apache, however it can be run standalone.
